@page "/ledgers/view/{LoanId:guid}"
@inject HttpClient Http
@using LendingApp.Shared.Models


@if (loan == null || borrower == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="top-section-grid mb-4">
        <!-- Column 1: Profile Image -->
        <div>
            <img src="images/profile.png" alt="Profile" style="width: 80px; height: 80px; object-fit: cover;" />
        </div>

        <!-- Column 2: Personal Info -->
        <div class="info-grid">
            <div><strong>Name:</strong></div>
            <div>@borrower.FullName</div>
            <div><strong>Address:</strong></div>
            <div>@borrower.Address</div>
            <div><strong>Contact:</strong></div>
            <div>@borrower.ContactNumber</div>
        </div>

        <!-- Column 3: Loan Info -->
        <div class="info-grid">
            <div><strong>Principal:</strong></div>
            <div>@loan.PrincipalAmount.ToString("N2")</div>
            <div><strong>Balance:</strong></div>
            <div>@loan.RemainingBalance.ToString("N2")</div>
        </div>

        <!-- Column 4: Payment Info -->
        <div class="info-grid">
            <div><strong>Installment:</strong></div>
            <div>@loan.InstallmentAmount.ToString("N2")</div>
            <div><strong>Payments:</strong></div>
            <div>@loan.PaymentsMade / @loan.ExpectedPayments</div>
        </div>
    </div>

    <table class="table list-table">
        <thead>
            <tr>
                <th></th>
                <th>Due Date</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 1; i <= loan.ExpectedPayments; i++)
            {
                var dueDate = GetDueDate(loan, i);
                bool isPaid = i <= loan.PaymentsMade;

                <tr>
                    <td>@i</td>
                    <td>@dueDate.ToShortDateString()</td>
                    <td>@loan.InstallmentAmount.ToString("N2")</td>
                    <td>@(isPaid ? "Paid" : "Pending")</td>
                    <td>
                        @if (!isPaid)
                        {
                            <a href="#" @onclick="() => ConfirmAutoPay(i)" @onclick:preventDefault>Auto</a>
                            <a href="#" @onclick="ShowPayForm" @onclick:preventDefault>Pay</a>
                        }
                        else
                        {
                            <span class="text-success">✓</span>
                        }

                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showPayDialog)
    {
        <div class="modal-backdrop">
            <div class="modal-box">
                <h4>Record Payment</h4>
                <div class="mb-2"><strong>Loan ID:</strong> @loan!.Id</div>
                <div class="mb-2"><strong>Collector:</strong> @loan.CollectorId</div>
                <div class="mb-3"><strong>Due #:</strong> @duePaymentNumber</div>

                <div class="form-group">
                    <label>Payment Date</label>
                    <input type="date" class="form-control" @bind="paymentDate" />
                </div>

                <div class="form-group">
                    <label>Payment Amount</label>
                    <input type="number" step="0.01" class="form-control" @bind="paymentAmount" />
                </div>

                <div class="form-group">
                    <label>Remarks</label>
                    <input type="text" class="form-control" @bind="remarks" />
                </div>

                <div class="mt-3 d-flex justify-content-end">
                    <button class="btn btn-secondary me-2" @onclick="ClosePayDialog">Cancel</button>
                    <button class="btn btn-primary" disabled>Submit (Coming soon)</button>
                </div>
            </div>
        </div>
    }

}

@inject IJSRuntime JS
@using System.Text.Json;
@code {
    [Parameter] public Guid LoanId { get; set; }
    private Loan? loan;
    private Borrower? borrower;

    // Modal state and input values
    private bool showPayDialog = false;
    private DateTime paymentDate = DateTime.Now;
    private double paymentAmount;
    private string remarks = string.Empty;
    private int duePaymentNumber;

    protected override async Task OnInitializedAsync()
    {
        loan = await Http.GetFromJsonAsync<Loan>($"api/loans/{LoanId}");
        if (loan != null)
        {
            borrower = await Http.GetFromJsonAsync<Borrower>($"api/borrowers/{loan.BorrowerId}");
        }
    }

    async Task ConfirmAutoPay(int paymentNumber)
    {
        if (loan == null) return;
        string message = $"Auto Pay:\n" +
                         $"- Loan ID: {loan.Id}\n" +
                         $"- Payment #: {paymentNumber}\n" +
                         $"- Amount: {loan.InstallmentAmount:N2}\n" +
                         $"- Date: {DateTime.Today:yyyy-MM-dd}\n\n" +
                         $"Proceed with payment?";

        var result = await JS.InvokeAsync<string>("prompt", message, "yes");
        if (result?.ToLower() == "yes")
        {
            await MarkPayment(paymentNumber);
        }
    }

    async Task ShowPayForm()
    {
        // var jsonOptions = new JsonSerializerOptions { WriteIndented = true };
        // string json = JsonSerializer.Serialize(loan, jsonOptions);
        // await JS.InvokeVoidAsync("alert", $"Loan Data:\n{json}");

        if (loan == null) return;

        // Setup inputs
        paymentDate = DateTime.Now;
        paymentAmount = loan.InstallmentAmount;
        remarks = string.Empty;
        duePaymentNumber = loan.PaymentsMade + 1;

        showPayDialog = true;
    }
    void ClosePayDialog()
    {
        showPayDialog = false;
    }

    DateTime GetDueDate(Loan loan, int paymentNumber)
    {
        var start = loan.StartDate ?? DateTime.Now;
        var interval = loan.PaymentFrequency switch
        {
            PaymentFrequency.Daily => TimeSpan.FromDays(1),
            PaymentFrequency.Weekly => TimeSpan.FromDays(7),
            PaymentFrequency.Monthly => TimeSpan.FromDays(30),
            _ => TimeSpan.FromDays(30)
        };
        return start.AddDays(interval.TotalDays * (paymentNumber - 1));
    }

    async Task MarkPayment(int number)
    {
        if (loan == null) return;

        var response = await Http.PostAsJsonAsync("api/ledgers/pay", new
        {
            LoanId = loan.Id,
            PaymentNumber = number,
            PaymentDate = DateTime.Now,
            CollectorId = loan.CollectorId 
        });

        if (response.IsSuccessStatusCode)
        {
            loan.PaymentsMade++;
            loan.RemainingBalance -= loan.InstallmentAmount;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Payment failed: " + await response.Content.ReadAsStringAsync());
        }
    }


}

<style>
    .top-section-grid {
        display: grid;
        grid-template-columns: 80px 1fr 1fr 1fr;
        gap: 20px;
        align-items: start;
    }

    .info-grid {
        display: grid;
        grid-template-columns: max-content auto;
        row-gap: 3px;
        column-gap: 12px;
        font-size: 0.95rem;
    }

    :deep(.top-section-grid) {
        display: grid !important;
        grid-template-columns: 80px 1fr 1fr 1fr !important;
        gap: 20px !important;
    }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-box {
        background: #fff;
        padding: 1.5rem;
        border-radius: 8px;
        width: 400px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }

    .form-group {
        margin-bottom: 1rem;
    }
</style>

