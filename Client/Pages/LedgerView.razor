@page "/ledgers/view/{LoanId:guid}"
@inject HttpClient Http
@using LendingApp.Shared.Models
@using System.Linq
@using System.Text.Json

@if (loan == null || borrower == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="top-section-grid mb-4">
        <div>
            <img src="images/profile.png" alt="Profile" style="width: 80px; height: 80px; object-fit: cover;" />
        </div>
        <div class="info-grid">
            <div><strong>Name:</strong></div>
            <div>@borrower.FullName</div>
            <div><strong>Address:</strong></div>
            <div>@borrower.Address</div>
            <div><strong>Contact:</strong></div>
            <div>@borrower.ContactNumber</div>
        </div>
        <div class="info-grid">
            <div><strong>Principal:</strong></div>
            <div>@loan.PrincipalAmount.ToString("N2")</div>
            <div><strong>Total:</strong></div>
            <div>@loan.TotalAmount.ToString("N2")</div>
            <div><strong>Balance:</strong></div>
            <div>@loan.RemainingBalance.ToString("N2")</div>
        </div>
        <div class="info-grid">
            <div><strong>Installment:</strong></div>
            <div>@loan.InstallmentAmount.ToString("N2")</div>
            <div><strong>Payments:</strong></div>
            <div>@loan.PaymentsMade / @loan.ExpectedPayments</div>
        </div>
    </div>

<table class="table table-striped list-table">
    <thead>
        <tr>
            <th>#</th>
            <th>Due Date</th>
            <th>Payment Date</th>
            <th>Amount Due</th>
            <th>Amount Paid</th>
            <th>Balance</th>
            <th>Status</th>
            <th>Remarks</th>
        </tr>
    </thead>
    <tbody>
        @if (loan != null)
        {
            double runningBalance = loan.TotalAmount;

            for (int i = 1; i <= loan.ExpectedPayments; i++)
            {
                var dueDate = GetDueDate(loan, i);
                var ledger = ledgerEntries.FirstOrDefault(l => l.PaymentNumber == i);
                bool isPaid = ledger != null;
                double amountPaid = ledger?.PaymentAmount ?? 0;
                string paymentDate = ledger?.PaymentDate.ToShortDateString() ?? "-";
                string remarks = ledger?.Remarks ?? "";

                if (isPaid)
                {
                    runningBalance -= amountPaid;
                }

                <tr>
                    <td>@i</td>
                    <td>@dueDate.ToShortDateString()</td>
                    <td>@paymentDate</td>
                    <td>@loan.InstallmentAmount.ToString("N2")</td>
                    <td>@(isPaid ? amountPaid.ToString("N2") : "-")</td>
                    <td>@runningBalance.ToString("N2")</td>
                    <td>
                        @if (isPaid)
                        { <span class="text-success">✓</span> }
                        else
                        { <a href="#" class="ms-2 text-primary" @onclick="() => StartPayment(loan)" @onclick:preventDefault>Pay</a> }
                    </td>
                    <td>@remarks</td>
                </tr>
            }
        }
    </tbody>
</table>
    @if (showPayDialog)
    {
        <div class="modal-backdrop">
            <div class="modal-box">
                <h5 class="mb-3">Record Payment</h5>

                <div><strong>Installment #:</strong> @currentPaymentNumber</div>
                <div><strong>Loan ID:</strong> @loan!.Id</div>
                <div><strong>Collector ID:</strong> @loan.CollectorId</div>

                <div class="form-group mt-3">
                    <label>Payment Date</label>
                    <input type="date" class="form-control" @bind="paymentDate" />
                </div>

                <div class="form-group mt-2">
                    <label>Payment Amount</label>
                    <input type="number" step="0.01" class="form-control" @bind="paymentAmount" />
                </div>

                <div class="form-group mt-2">
                    <label>Remarks</label>
                    <input type="text" class="form-control" @bind="remarks" />
                </div>

                <div class="d-flex justify-content-end mt-3">
                    <button class="btn btn-secondary me-2" @onclick="ClosePayDialog">Cancel</button>
                    <button class="btn btn-primary" @onclick="() => SubmitPayment(loan)">Submit</button>
                </div>
            </div>
        </div>
    }

}

@code {
    [Inject] IJSRuntime JS { get; set; } = default!;
    [Parameter] public Guid LoanId { get; set; }
    private Loan? loan;
    private Borrower? borrower;
    private List<Ledger> ledgerEntries = new();

    private bool showPayDialog = false;
    private int currentPaymentNumber;
    private DateTime paymentDate = DateTime.Now;
    private double paymentAmount;
    private string remarks = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        loan = await Http.GetFromJsonAsync<Loan>($"api/loans/{LoanId}");
        if (loan != null)
        {
            borrower = await Http.GetFromJsonAsync<Borrower>($"api/borrowers/{loan.BorrowerId}");
            ledgerEntries = await Http.GetFromJsonAsync<List<Ledger>>($"api/ledgers/loan/{loan.Id}");
        }
    }

    async Task StartPayment(Loan loan)
    {
        // int nextPaymentNumber = loan.PaymentsMade + 1;
        // await JS.InvokeVoidAsync("alert", $"Starting payment for installment #{nextPaymentNumber} for loan {loan.Id}");

        var json = System.Text.Json.JsonSerializer.Serialize(loan, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        await JS.InvokeVoidAsync("alert", $"Starting payment #{loan.PaymentsMade + 1}\n\nLoan Info:\n{json}");

        this.loan = loan;
        currentPaymentNumber = loan.PaymentsMade + 1;
        paymentAmount = loan.InstallmentAmount;
        paymentDate = DateTime.Today;
        remarks = string.Empty;
        showPayDialog = true;

    }

    async Task SubmitPayment(Loan loan)
    {
        if (loan == null) return;

        var newLedger = new Ledger
        {
            LoanId = loan.Id,
            CollectorId = loan.CollectorId,
            PaymentNumber = currentPaymentNumber,
            PaymentDate = paymentDate,
            PaymentAmount = paymentAmount,
            Remarks = remarks
        };

        // Post ledger entry
        var response = await Http.PostAsJsonAsync("api/ledgers", newLedger);
        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Failed to post ledger.");
            return;
        }

        // Update loan remaining balance and payments made
        loan.RemainingBalance -= paymentAmount;
        loan.PaymentsMade += 1;

        var updateResponse = await Http.PutAsJsonAsync($"api/loans/{loan.Id}/payment-update", loan);
        if (!updateResponse.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Failed to update loan payment info.");
            return;
        }

        await JS.InvokeVoidAsync("alert", $"Payment recorded successfully for installment #{currentPaymentNumber}");

        showPayDialog = false;

        // Reload ledger entries and loan info
        ledgerEntries = await Http.GetFromJsonAsync<List<Ledger>>($"api/ledgers/loan/{loan.Id}");
        loan = await Http.GetFromJsonAsync<Loan>($"api/loans/{loan.Id}");
    }

    void ClosePayDialog() => showPayDialog = false;

    DateTime GetDueDate(Loan loan, int paymentNumber)
    {
        var start = loan.StartDate ?? DateTime.Now;
        var interval = loan.PaymentFrequency switch
        {
            PaymentFrequency.Daily => TimeSpan.FromDays(1),
            PaymentFrequency.Weekly => TimeSpan.FromDays(7),
            PaymentFrequency.Monthly => TimeSpan.FromDays(30),
            _ => TimeSpan.FromDays(30)
        };
        return start.AddDays(interval.TotalDays * (paymentNumber - 1));
    }

}
