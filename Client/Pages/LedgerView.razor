@page "/ledgers/view/{LoanId:guid}"
@inject HttpClient Http
@using LendingApp.Shared.Models
@using System.Linq

@if (loan == null || borrower == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="top-section-grid mb-4">
        <div>
            <img src="images/profile.png" alt="Profile" style="width: 80px; height: 80px; object-fit: cover;" />
        </div>
        <div class="info-grid">
            <div><strong>Name:</strong></div>
            <div>@borrower.FullName</div>
            <div><strong>Address:</strong></div>
            <div>@borrower.Address</div>
            <div><strong>Contact:</strong></div>
            <div>@borrower.ContactNumber</div>
        </div>
        <div class="info-grid">
            <div><strong>Principal:</strong></div>
            <div>@loan.PrincipalAmount.ToString("N2")</div>
            <div><strong>Total:</strong></div>
            <div>@loan.TotalAmount.ToString("N2")</div>
            <div><strong>Balance:</strong></div>
            <div>@loan.RemainingBalance.ToString("N2")</div>
        </div>
        <div class="info-grid">
            <div><strong>Installment:</strong></div>
            <div>@loan.InstallmentAmount.ToString("N2")</div>
            <div><strong>Payments:</strong></div>
            <div>@loan.PaymentsMade / @loan.ExpectedPayments</div>
        </div>
    </div>

<table class="table table-striped list-table">
    <thead>
        <tr>
            <th>#</th>
            <th>Due Date</th>
            <th>Payment Date</th>
            <th>Amount Due</th>
            <th>Amount Paid</th>
            <th>Balance</th>
            <th>Status</th>
            <th>Remarks</th>
        </tr>
    </thead>
    <tbody>
        @if (loan != null)
        {
            double runningBalance = loan.TotalAmount;

            for (int i = 1; i <= loan.ExpectedPayments; i++)
            {
                var dueDate = GetDueDate(loan, i);
                var ledger = ledgerEntries.FirstOrDefault(l => l.PaymentNumber == i);
                bool isPaid = ledger != null;
                double amountPaid = ledger?.PaymentAmount ?? 0;
                string paymentDate = ledger?.PaymentDate.ToShortDateString() ?? "-";
                string remarks = ledger?.Remarks ?? "";

                if (isPaid)
                {
                    runningBalance -= amountPaid;
                }

                <tr>
                    <td>@i</td>
                    <td>@dueDate.ToShortDateString()</td>
                    <td>@paymentDate</td>
                    <td>@loan.InstallmentAmount.ToString("N2")</td>
                    <td>@(isPaid ? amountPaid.ToString("N2") : "-")</td>
                    <td>@runningBalance.ToString("N2")</td>
                    <td>@(isPaid ? "Paid" : "Pending")</td>
                    <td>@remarks</td>
                </tr>
            }
        }
    </tbody>
</table>

}

@code {
    [Parameter] public Guid LoanId { get; set; }
    private Loan? loan;
    private Borrower? borrower;
    private List<Ledger> ledgerEntries = new();

    protected override async Task OnInitializedAsync()
    {
        loan = await Http.GetFromJsonAsync<Loan>($"api/loans/{LoanId}");
        if (loan != null)
        {
            borrower = await Http.GetFromJsonAsync<Borrower>($"api/borrowers/{loan.BorrowerId}");
            ledgerEntries = await Http.GetFromJsonAsync<List<Ledger>>($"api/ledgers/loan/{loan.Id}");
        }
    }

    DateTime GetDueDate(Loan loan, int paymentNumber)
    {
        var start = loan.StartDate ?? DateTime.Now;
        var interval = loan.PaymentFrequency switch
        {
            PaymentFrequency.Daily => TimeSpan.FromDays(1),
            PaymentFrequency.Weekly => TimeSpan.FromDays(7),
            PaymentFrequency.Monthly => TimeSpan.FromDays(30),
            _ => TimeSpan.FromDays(30)
        };
        return start.AddDays(interval.TotalDays * (paymentNumber - 1));
    }
}
